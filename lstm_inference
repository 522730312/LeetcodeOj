int LSTM::forward(const std::vector<Mat>& bottom_blobs, std::vector<Mat>& top_blobs, const Option& opt) const
{
    // size x T
    const Mat& input_blob = bottom_blobs[0];
    size_t elemsize = input_blob.elemsize;

    // T, 0 or 1 each
    const Mat& cont_blob = bottom_blobs[1];

    int T = input_blob.h;
    int size = input_blob.w;

    // initial hidden state
    Mat hidden(num_output, 4u, opt.workspace_allocator);
    if (hidden.empty())
        return -100;
    hidden.fill(0.f);

    // internal cell state
    Mat cell(num_output, 4u, opt.workspace_allocator);
    if (cell.empty())
        return -100;
    // 4 x num_output
    Mat gates(4, num_output, 4u, opt.workspace_allocator);
    if (gates.empty())
        return -100;

    Mat& top_blob = top_blobs[0];
    top_blob.create(num_output, T, elemsize, opt.blob_allocator);
    if (top_blob.empty())
        return -100;

    // unroll
    //T = input_blob.h;
    //size = input_blob.w;
    //top_blob output
    for (int t=0; t<T; t++)
    {
        const int cont = ((const int*)cont_blob)[t];
        const float* x = input_blob.row(t);
        for (int q=0; q<num_output; q++)
        {
            float h_cont = cont ? hidden[q] : 0.f;

            const float* bias_c_data_ptr = (const float*)bias_c_data + 4 * q;
            float* gates_data = (float*)gates + 4 * q;

            // gate I F O G
            const float* weight_hc_data_I = (const float*)weight_hc_data + weight_hc_data.w * q;
            const float* weight_xc_data_I = (const float*)weight_xc_data + weight_xc_data.w * q;
            const float* weight_hc_data_F = (const float*)weight_hc_data + weight_hc_data.w * q + size;
            const float* weight_xc_data_F = (const float*)weight_xc_data + weight_xc_data.w * q + size;
            const float* weight_hc_data_O = (const float*)weight_hc_data + weight_hc_data.w * q + size*2;
            const float* weight_xc_data_O = (const float*)weight_xc_data + weight_xc_data.w * q + size*2;
            const float* weight_hc_data_G = (const float*)weight_hc_data + weight_hc_data.w * q + size*3;
            const float* weight_xc_data_G = (const float*)weight_xc_data + weight_xc_data.w * q + size*3;

            float I = bias_c_data_ptr[0];
            float F = bias_c_data_ptr[1];
            float O = bias_c_data_ptr[2];
            float G = bias_c_data_ptr[3];
            for (int i=0; i<size; i++)
            {
                I += weight_hc_data_I[i] * h_cont + weight_xc_data_I[i] * x[i];
                F += weight_hc_data_F[i] * h_cont + weight_xc_data_F[i] * x[i];
                O += weight_hc_data_O[i] * h_cont + weight_xc_data_O[i] * x[i];
                G += weight_hc_data_G[i] * h_cont + weight_xc_data_G[i] * x[i];
            }

            gates_data[0] = I;
            gates_data[1] = F;
            gates_data[2] = O;
            gates_data[3] = G;
        }

        float* output_data = top_blob.row(t);
        for (int q=0; q<num_output; q++)
        {
            float* gates_data = (float*)gates + 4 * q;

            float I = gates_data[0];
            float F = gates_data[1];
            float O = gates_data[2];
            float G = gates_data[3];

            I = 1.f / (1.f + exp(-I));
            F = cont ? 1.f / (1.f + exp(-F)) : 0.f;
            O = 1.f / (1.f + exp(-O));
            G = tanh(G);

            float cell2 = F * cell[q] + I * G;
            float H = O * tanh(cell2);

            cell[q] = cell2;
            hidden[q] = H;
            output_data[q] = H;
        }

        // no cell output here
    }

    return 0;
}
